networks:
  backend-network:
    driver: bridge

volumes:
  db-data:
  pgadmin-data:

services:
## PostgreSQL Database
  postgres:
    image: postgres:18
    container_name: postgres
    shm_size: 256mb
    restart: unless-stopped
    networks:
      - backend-network
    ports:
      - "5432:5432"  # Host:5432 -> Container:5432 (standard PostgreSQL port inside)
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-PLACEHOLDER_DB}
      POSTGRES_USER: ${POSTGRES_USER:-PLACEHOLDER_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-PLACEHOLDER_PASS}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-PLACEHOLDER_USER} -d ${POSTGRES_DB:-PLACEHOLDER_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

## PgAdmin Database Management
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4
    shm_size: 128mb
    restart: unless-stopped
    networks:
      - backend-network
    ports:
      - "8888:80"  # Host:8888 -> Container:80 (standard PgAdmin port inside)
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_USER:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin_password}
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres

## Redis Cache & Message Broker
  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    networks:
      - backend-network
    ports:
      - "6379:6379"  # Host:6379 -> Container:6379 (standard Redis port inside)
    command: redis-server --requirepass ${REDIS_PASSWORD:-dev_redis_password}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

## Django Backend
  django:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: django
    restart: unless-stopped
    networks:
      - backend-network
    ports:
      - "8000:8000"  # Host:8000 -> Container:8000
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-dev_secret_key_change_in_production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DJANGO_ALLOWED_HOSTS=${DJANGO_ALLOWED_HOSTS:-localhost,127.0.0.1}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-rota_user}:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/${POSTGRES_DB:-rota_round}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/1
    volumes:
      - ./:/app
    command: python manage.py runserver 0.0.0.0:8000
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

## Celery Worker
  celery:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: celery
    restart: unless-stopped
    networks:
      - backend-network
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY:-dev_secret_key_change_in_production}
      - DJANGO_DEBUG=${DJANGO_DEBUG:-True}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-rota_user}:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/${POSTGRES_DB:-rota_round}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/0
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-dev_redis_password}@redis:6379/1
    volumes:
      - ./:/app
    command: celery -A config worker --loglevel=info
    depends_on:
      - django
      - redis
